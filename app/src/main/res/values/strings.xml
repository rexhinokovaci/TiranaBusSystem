<resources>
    <string name="app_name">Tirana Bus System</string>
    <string name="firstBtn">Binary</string>

    <string name="second_Btn">Subnet</string>
    <string name="third_button">Encrypt and Decrypt</string>
    <string name="fourth_button">Simulator</string>
    <string name="emptyText"> </string>
    <string name="hintFirstOctet">192</string>
    <string name="hintSecondOctet">168</string>
    <string name="thirdOctetHint">1</string>
    <string name="fourthOctetHint">1</string>
    <string name="cidrHint">26</string>
    <string name="textPopUpConfirmation">Notice!</string>
    <string name="textPopUpEnd">Itinerary and stations of Tirana public transport lines within the urban administrative units as well as the map of the itineraries. Tickets cost 40 lek/ 0.3 Euro and public transport hours are 06:00 - 23:00 every day (regardless of holidays or days of the week).</string>
    <string name="closeDescription">Closing</string>
    <string name="ImageDescription">Image</string>
    <string name="confirmation">CONFIRM</string>
    <string name="enter_here">Enter Here:</string>
    <string name="press_to_encode">Press To Encode</string>
    <string name="enter_text_here">Enter Text Here:</string>
    <string name="press_to_decode">Press To Decode</string>
    <string name="lookup">Lookup</string>
    <string name="learn">Learn</string>
    <string name="empty"> </string>
    <string name="buttonConfirmation">Confirm</string>
    <string name="CloseDescription">Closing Image Button</string>
    <string name="subenttips1">Subnetting allows you to create multiple logical networks that exist within a single Class A, B, or C network.
        If you do not subnet, you are only able to use one network from your Class A, B, or C network, which is unrealistic.</string>
    <string name="subnettips2">Each data link on a network must have a unique network ID, with every node on that link being a member of the same network. If you break a major network (Class A, B, or C)</string>
    <string name="subnettips3">Each data link on a network must have a unique network ID, with every node on that link being a member of the same network. If you break a major network (Class A, B, or C)</string>
    <string name="subnettips5">it allows you to create a network of interconnecting subnetworks. Each data link on this network would then have a unique network/subnetwork ID. Any device, or gateway, that connects n networks/subnetworks has n distinct IP addresses, one for each network / subnetwork that it interconnects.</string>
    <string name="subntettsip2">y extending the mask to be 255.255.255.224, you have taken three bits (indicated by sub) from the original host portion of the address and used them to make subnets. With these three bits, it is possible to create eight subnets. With the remaining five host ID bits,</string>
    <string name="photo">photo</string>
    <string name="sbbdf">each subnet can have up to 32 host addresses, 30 of which can actually be assigned to a device since host ids of all zeros or all ones are not allowed (it is very important to remember this). So, with this in mind, these subnets have been created.</string>
    <string name="sbnunre">An IP address is an address used in order to uniquely identify a device on an IP network. The address is made up of 32 binary bits, which can be divisible into a network portion and host portion with the help of a subnet mask.</string>
    <string name="vlsmtips1">In order to be able to implement VLSMs in a quick and efficient way, you need to understand and memorize the IP address blocks and available hosts for various subnet masks.</string>
    <string name="vlsm2tips">Create a small table with all of this information and use it to create your VLSM network. The following table shows the block sizes used for subnetting a Class C subnet.</string>
    <string name="vlsm3">Having this table in front of you is very helpful. For example, if you have a subnet with 28 hosts then you can easily see from the table that you will need a block size of 32. For a subnet of 40 hosts you will need a block size of 64.</string>
    <string name="vlsm11">Example: Create a VLSM Network</string>
    <string name="vlsmlm3">Let us use the sample network provided above to implement VLSM. According to the number of hosts in each subnet, identify the addressing blocks required. You should end up with the following VLSM table for this Class C network 192.168.10.0/24.</string>
    <string name="vlsml2">The final step is to allocate the actual subnets to our design and construct our VLSM network. We will take into account that subnet-zero can be used in our network design, therefore the following solution will really allow us to save unnecessary addressing waste:</string>
    <string name="vlsmtable1">vlsmtable1</string>
    <string name="blsmtable2">blsmtable2</string>
    <string name="binarytipscal">Conversion of binary to decimal (base-2 to base-10) numbers and back is an important concept to understand as the binary numbering system forms the basis for all computer and digital systems.</string>
    <string name="binarycalctips2">The decimal or “denary” counting system uses the Base-of-10 numbering system where each digit in a number takes on one of ten possible values, called “digits”, from 0 to 9, eg. 21310 (Two Hundred and Thirteen).</string>
    <string name="binarycalctips3">But as well as having 10 digits ( 0 through 9 ), the decimal numbering system also has the operations of addition ( + ), subtraction ( – ), multiplication ( × ) and division ( ÷ ).</string>
    <string name="binarrycalc4">In a decimal system each digit has a value ten times greater than its previous number and this decimal numbering system uses a set of symbols, b, together with a base, q, to determine the weight of each digit within a number. For example, the six in sixty has a lower weighting than the six in six hundred. Then in a binary numbering system we need some way of converting Decimal to Binary as well as back from Binary to Decimal.</string>
    <string name="binatarcaltip5">Any numbering system can be summarised by the following relationship:</string>
    <string name="binarcalctips6">In the decimal, base-10 (den) or denary numbering system, each integer number column has values of units, tens, hundreds, thousands, etc as we move along the number from right to left. Mathematically these values are written as</string>
    <string name="rer32">So we can see that the “decimal numbering system” has a base of 10 or modulo-10 (sometimes called MOD-10) with the position of each digit in the decimal system indicating the magnitude or weight of that digit as q is equal to “10” (0 through 9).</string>
    <string name="sunbnet4">We saw above that in the decimal number system, the weight of each digit from right to left increases by a factor of 10. In the binary number system, the weight of each digit increases by a factor of 2 as shown.</string>
    <string name="ranges1">Internet Protocol hierarchy contains several classes of IP Addresses to be used efficiently in various situations as per the requirement of hosts per network. Broadly, the IPv4 Addressing system is divided into five classes of IP Addresses. All the five classes are identified by the first octet of IP Address.</string>
    <string name="ranges2">The first octet referred here is the left most of all. The octets numbered as follows depicting dotted decimal notation of IP Address −</string>
    <string name="ranges4">When calculating hosts\' IP addresses, 2 IP addresses are decreased because they cannot be assigned to hosts, i.e. the first IP of a network is network number and the last IP is reserved for Broadcast IP.</string>
    <string name="rangest">Class A Address The first bit of the first octet is always set to 0 (zero). Thus the first octet ranges from 1 – 127, i.e.</string>
    <string name="tipf2">Class A addresses only include IP starting from 1.x.x.x to 126.x.x.x only. The IP range 127.x.x.x is reserved for loopback IP addresses. The default subnet mask for Class A IP address is 255.0.0.0 which implies that Class A addressing can have 126 networks and 16777214 hosts </string>
    <string name="hgtgd">Class A IP address format is thus: 0NNNNNNN.HHHHHHHH.HHHHHHHH.HHHHHHHH</string>
    <string name="class_a_address">Class A Address</string>
    <string name="class_b_address">Class B Address</string>
    <string name="fitdfr">An IP address which belongs to class B has the first two bits in the first octet set to 10, i.e.</string>
    <string name="branges5">Class B IP Addresses range from 128.0.x.x to 191.255.x.x. The default subnet mask for Class B is 255.255.x.x. Class B has 16384 (214) Network Addresses and 65534 Host Addresses</string>
    <string name="rangesofb3">Class B IP address format is: 10NNNNNN.NNNNNNNN.HHHHHHHH.HHHHHHHH</string>
    <string name="class_c_address">Class C Address</string>
    <string name="rangesb55">The first octet of Class C IP address has its first 3 bits set to 110, that is −</string>
    <string name="cadr3">Class C IP addresses range from 192.0.0.x to 223.255.255.x. The default subnet mask for Class C is 255.255.255.x.</string>
    <string name="srouces">Class C gives 2097152 Network addresses and 254 Host addresses.</string>
    <string name="gngnfs">Class C IP address format is: 110NNNNN.NNNNNNNN.NNNNNNNN.HHHHHHHH</string>
    <string name="dwq32">Class D Address</string>
    <string name="tafnesoges">Very first four bits of the first octet in Class D IP addresses are set to 1110, giving a range of −</string>
    <string name="drangeino">Class D has IP address range from 224.0.0.0 to 239.255.255.255. Class D is reserved for Multicasting. In multicasting data is not destined for a particular host, that is why there is no need to extract host address from the IP address, and Class D does not have any subnet mask.</string>
    <string name="edadress">Class E Address</string>
    <string name="eaingodasdr"><![CDATA[This IP Class is reserved for experimental purposes only for R&D or Study. IP addresses in this class ranges from 240.0.0.0 to 255.255.255.254. Like Class D, this class too is not equipped with any subnet mask.]]></string>
    <string name="forsti">When building a small office network, the two most essential pieces of equipment you will need are switches and routers. Though they look similar, the two devices perform different functions within a network.</string>
    <string name="what_is_a_switch">What is a switch?</string>
    <string name="dwdewdw">Switches facilitate the sharing of resources by connecting together all the devices, including computers, printers, and servers, in a small business network. Thanks to the switch, these connected devices can share information and talk to each other, regardless of where they are in a building or on a campus. Building a small business network is not possible without switches to tie devices together.</string>
    <string name="routes3">What is a router?</string>
    <string name="rihne3">Just as a switch connects multiple devices to create a network, a router connects multiple switches, and their respective networks, to form an even larger network.</string>
    <string name="friv4">These networks may be in a single location or across multiple locations. When building a small business network, you will need one or more routers.</string>
    <string name="routers">In addition to connecting multiple networks together, the router also allows networked devices and multiple users to access the Internet.</string>
    <string name="routefnimore">Ultimately, a router works as a dispatcher, directing traffic and choosing the most efficient route for information, in the form of data packets, to travel across a network. A router connects your business to the world, protects information from security threats, and even decides which devices have priority over others.</string>
    <string name="button">Submit</string>
    <string name="videos">Videos</string>
    <string name="books">Books</string>
    <string name="quick_tips">Quick Tips</string>
    <string name="powered_by_n_modex">Powered by\n Modex</string>
    <string name="follow_us_on_twitter">Follow Us On Twitter!</string>
    <string name="decimal">Decimal</string>
    <string name="binary">Binary</string>
    <string name="octal">Octal</string>
    <string name="hexa">Hexa</string>
    <string name="wwwgooglecom">www.google.com</string>
    <string name="todo">todo</string>


</resources>
